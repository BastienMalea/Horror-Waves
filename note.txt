// Note entre les séances de TP2 (Bastien) :

AU niveau du diagramme de classe, je me demandais est ce qu'on peut pas mettre que Personnage a une listeArme au lieu que ca soit Monstre et Joueur qui en aient?
Ca allège le code je pense après c'est au  niveau de la méthode RamasserArme qu'il faudra mettre une condition en mode Joueur ou Monstre

J'ai effectué les modifs par rapport a ce qu'on avait fais mercredi 
Du coup les constructeurs, setters et toString marchent pour les classes MOnstre, Arme, Joueur, Munition et Power

Jsuis un peu perdu sur ou créer les classes genre manager, collisionner, deplaceur et Action

J'ai pas fais le bail de propriété je vais checker ce w.e je pense 

La map est ce qu'on l'implémente dans une classe Jeu et dedans on mettra aussi les décors, les obstacles etc ? 



// Note TP1 (Antoine) :

J'ai regardé moi ça marche (enfin j'ai reconfiguré mon IDE, si tu y arrive pas on fera un discord stv)

ducoup perso je voyais pas ça comme un jeu case par case mais plutot libre dans les déplacements (diagonale etc)

et j'ai regardé le diagramme de classe, mdrr j'ai rien compris

comme je sais pas ce que cc'est le git ignore on verra plus tard hein ptdrr

voila ce que j'ai fait ducoup :

Vérification, analyse, modification et création du code :
    |- renommage
      |- dossier ressources en rsrc
      |- dossier en view en views
      |- le fichier qui était dans le dossier views en Test.java (il doit avoir le même nom que le fichier fxml)
    |- partie fxml et backend fxml
      |- j'ai codé test.fxml pour travailler un peu le langage
      |- j'ai fait la partie backend de test.fxml dans Test.java
        |- incrémentation d'un bouton avec le nombre de clic
        |- recopiage de la zone de texte en haut dans le label au milieu en temps réel
    |- partie modele
      |- classe Monstre.java fonctionne
      |- classe Munition.java
        |- Constructeur
        |- getter/setter
        |- toString()
      |- classe Arme.java
        |- modification de munitions
        |- getter/setter + ajout de munition dans le Constructeur
        |- toString()
      |- classe Personnage.java
        |- des trucs je me souviens plus ptdrr
      |- Modification de Item.java
      |- mise en place de l'héritage entre munition et item (il faut que je le fasses pour les autres classes mais pas le time)




// Note TP2 (Antoine) :

Le nom des package doit être entièrement en minuscule (je les ai renommé ducoup)
Le constructeur de la classe doit être en haut (après les variables)

Ajout de la variable img dans Item.class
Déplacement de la liste d'arme dans Personnage.class
Déplacement de la fonction afficherListeArme dans Personnage.class
plein d'autre petites modif que je me souviens plus
developpement de manager.class

pour tes autres question je sais pas, il faut que je trouve un tuto javaFX sur youtube parce que je suis complètement perdu pour la grille, et le reste mdrr.
pour les propriétés, on a pas besoin de faire du binding encore donc on verra quand on en aura besoin.
Pas grand chose aujourd'hui mais bon je vais m'y mettre sérieusement ce weekend




// Note TD3 (Mr Bouhours) :

Notre appli elle fera : 
Un processus il a une zone memoire, une pile d'instructions et un thread principale (tjr 1 par processus)
Au moment de l'execution : Le systeme Alloue la mémoire / charge les instructions / déroule les instructions pour les interpreter les unes à la suite des autres -> Le thread ( unité d'execution) 

Notre appli : elle aura un thread supplémentaire :
Tout les thread d'un même processus partagent la même zone mémoire ( génant quand on va vouloir modifier l'interface graphique (solution: modif de l'interface que par le thread principal))

Boucle de jeu def: mettre un jour l'interface un element du jeu toute les x secondes

On peut pas tourner a la vitesse du processus
Rajouter la notion de temps dans la boucle de jeu:
while(jeu pas perdu)
  {
  sleep(1000); <--1 fps
  sleep(500); etc..
  miseAJourDuJeu();
  }

Cette boucle la faire dans un thread autre que principal :
Hérité de la classe thread abs avec methode run abs 
Classe boucleDeJeu : (Avoir des filles qui tournent pas a la même vitesse)
run(){
  sleep()
  beep(); <-- A chaque fois on entend beep il faut faire qqchose 
  ex : si le beep permet de changer la position du perso, c'est pas bon pcq on modifie le modèle dans le thread non principal
  solution: ces instructions qui modifient -> execute les dans le thread principale quand tu peux : Platform.runlater(Instruction Runable)
}

BOucleDeJeu ->implémente l'interface Runable qui a la méthode run mais pas le start :
Thread b = new Thread(new BoucleDeJeu());
b.start();
Le but : identifer ce qui est temporel dans notre jeu pour le mettre dans notre boucle

Platform.runlater(()->{
  ....
  ....(liste instruction)
});



// Note TP3 (Antoine) :

|-Modifications et ajouts
 |-J'ai remis le diagramme de classe bien propre
 |-Personnage.java / Monstre.java / Joueur.java pour que tout corresponde avec les modification du diagramme de classe
 |-Modification du system d'hitbox dans le diagramme de classe et ajout de la fonction hitbox pour les personnages
 |-Ajout de l'interface Action
 |-Ajout de la méthode update munition
 |-Début de programmation de ramasserArme



TD 05/01 : 

Site sur le multi threading : https://devstory.net/10269/java-multithreading <-- thread qui implemente l'interface runable 


Diagramme de classe <-- Ajouter les classes de vues du code behind pour voir les connections avec notre modèle